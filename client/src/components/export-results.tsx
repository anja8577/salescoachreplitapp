import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Share2, Download, Mail, Home, User as UserIcon } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import type { Step, Substep, Behavior, User } from "@shared/schema";

type StepWithSubsteps = Step & {
  substeps: (Substep & {
    behaviors: Behavior[];
  })[];
};

interface ExportResultsProps {
  steps: StepWithSubsteps[];
  checkedBehaviors: Set<number>;
  totalScore: number;
  user: User;
  assessmentTitle: string;
}

export default function ExportResults({ 
  steps, 
  checkedBehaviors, 
  totalScore, 
  user, 
  assessmentTitle 
}: ExportResultsProps) {
  const { toast } = useToast();
  const [isSharing, setIsSharing] = useState(false);

  const generateResultsText = () => {
    const stepResults = steps.map(step => {
      const stepScore = step.substeps.reduce((total, substep) => {
        return total + substep.behaviors.reduce((substepTotal, behavior) => {
          if (checkedBehaviors.has(behavior.id)) {
            return substepTotal + behavior.proficiencyLevel;
          }
          return substepTotal;
        }, 0);
      }, 0);

      return `${step.title}: ${stepScore} points`;
    }).join('\n');

    return `SSA Behavior Assessment Results

User: ${user.fullName} (${user.email})
${user.team ? `Team: ${user.team}` : ''}
Assessment: ${assessmentTitle}
Date: ${new Date().toLocaleDateString()}

Total Score: ${totalScore} points

Step Breakdown:
${stepResults}

Generated by SSA Behavior Assessment Tool`;
  };

  const handleWebShare = async () => {
    setIsSharing(true);
    try {
      const resultsText = generateResultsText();

      if (navigator.share) {
        await navigator.share({
          title: `${assessmentTitle} - Results`,
          text: resultsText,
        });
        toast({
          title: "Shared successfully",
          description: "Assessment results have been shared.",
        });
      } else {
        // Fallback for browsers without Web Share API
        await navigator.clipboard.writeText(resultsText);
        toast({
          title: "Copied to clipboard",
          description: "Assessment results copied. You can now paste and share them.",
        });
      }
    } catch (error: any) {
      if (error.name !== 'AbortError') {
        toast({
          title: "Share failed",
          description: "Unable to share results. Please try again.",
          variant: "destructive",
        });
      }
    } finally {
      setIsSharing(false);
    }
  };

  const handleDownload = () => {
    const resultsText = generateResultsText();
    const blob = new Blob([resultsText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${assessmentTitle.replace(/[^a-z0-9]/gi, '_')}_results.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Download started",
      description: "Assessment results file has been downloaded.",
    });
  };

  const handleEmailShare = () => {
    const resultsText = generateResultsText();
    const subject = encodeURIComponent(`${assessmentTitle} - Assessment Results`);
    const body = encodeURIComponent(resultsText);
    const mailtoUrl = `mailto:?subject=${subject}&body=${body}`;

    window.open(mailtoUrl, '_blank');
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 md:p-6">
      <h2 className="text-lg font-semibold text-gray-900 mb-4">Export Results</h2>

      <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
        <Button 
          onClick={handleWebShare}
          disabled={isSharing}
          className="flex items-center justify-center space-x-2"
        >
          <Share2 size={16} />
          <span>{isSharing ? "Sharing..." : "Share"}</span>
        </Button>

        <Button 
          onClick={handleDownload}
          variant="outline"
          className="flex items-center justify-center space-x-2"
        >
          <Download size={16} />
          <span>Download</span>
        </Button>

        <Button 
          onClick={handleEmailShare}
          variant="outline"
          className="flex items-center justify-center space-x-2"
        >
          <Mail size={16} />
          <span>Email</span>
        </Button>
      </div>

      <p className="text-sm text-gray-600 mt-3">
        Share your assessment results with colleagues or save them for future reference.
      </p>
    </div>
  );
}