import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Share2, Download, Home, User as UserIcon } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import type { Step, Substep, Behavior, User } from "@shared/schema";

type StepWithSubsteps = Step & {
  substeps: (Substep & {
    behaviors: Behavior[];
  })[];
};

interface ExportResultsProps {
  steps: StepWithSubsteps[];
  checkedBehaviors: Set<number>;
  totalScore: number;
  user: User;
  assessmentTitle: string;
}

export default function ExportResults({ 
  steps, 
  checkedBehaviors, 
  totalScore, 
  user, 
  assessmentTitle 
}: ExportResultsProps) {
  const { toast } = useToast();
  const [isSharing, setIsSharing] = useState(false);
  const [pdfBlob, setPdfBlob] = useState<Blob | null>(null);

  const generateResultsText = () => {
    const stepResults = steps.map(step => {
      const stepScore = step.substeps.reduce((total, substep) => {
        return total + substep.behaviors.reduce((substepTotal, behavior) => {
          if (checkedBehaviors.has(behavior.id)) {
            return substepTotal + behavior.proficiencyLevel;
          }
          return substepTotal;
        }, 0);
      }, 0);

      return `${step.title}: ${stepScore} points`;
    }).join('\n');

    return `SSA Behavior Assessment Results

User: ${user.fullName} (${user.email})
${user.team ? `Team: ${user.team}` : ''}
Assessment: ${assessmentTitle}
Date: ${new Date().toLocaleDateString()}

Total Score: ${totalScore} points

Step Breakdown:
${stepResults}

Generated by SSA Behavior Assessment Tool`;
  };

  const handleWebShare = async () => {
    setIsSharing(true);
    try {
      const resultsText = generateResultsText();

      if (navigator.share) {
        await navigator.share({
          title: `${assessmentTitle} - Results`,
          text: resultsText,
        });
        toast({
          title: "Shared successfully",
          description: "Assessment results have been shared.",
        });
      } else {
        // Fallback for browsers without Web Share API
        await navigator.clipboard.writeText(resultsText);
        toast({
          title: "Copied to clipboard",
          description: "Assessment results copied. You can now paste and share them.",
        });
      }
    } catch (error: any) {
      if (error.name !== 'AbortError') {
        toast({
          title: "Share failed",
          description: "Unable to share results. Please try again.",
          variant: "destructive",
        });
      }
    } finally {
      setIsSharing(false);
    }
  };

  const handleDownload = async () => {
    try {
      const pdf = new jsPDF();
      
      // Header
      pdf.setFontSize(20);
      pdf.text('Selling Skills Assessment', 20, 30);
      
      pdf.setFontSize(12);
      pdf.text(`User: ${user.fullName}`, 20, 45);
      pdf.text(`Email: ${user.email}`, 20, 55);
      if (user.team) pdf.text(`Team: ${user.team}`, 20, 65);
      pdf.text(`Date: ${new Date().toLocaleDateString()}`, 20, 75);
      pdf.text(`Assessment: ${assessmentTitle}`, 20, 85);
      
      let yPosition = 100;
      
      // Steps and behaviors
      steps.forEach((step, stepIndex) => {
        // Add new page if needed
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        
        pdf.setFontSize(14);
        pdf.text(`${stepIndex + 1}. ${step.title}`, 20, yPosition);
        yPosition += 10;
        
        step.substeps.forEach((substep, substepIndex) => {
          if (yPosition > 270) {
            pdf.addPage();
            yPosition = 20;
          }
          
          pdf.setFontSize(12);
          pdf.text(`  ${substepIndex + 1}.${stepIndex + 1} ${substep.title}`, 25, yPosition);
          yPosition += 8;
          
          substep.behaviors.forEach((behavior, behaviorIndex) => {
            if (yPosition > 275) {
              pdf.addPage();
              yPosition = 20;
            }
            
            const isChecked = checkedBehaviors.has(behavior.id);
            const checkbox = isChecked ? '☑' : '☐';
            const levelText = `L${behavior.proficiencyLevel}`;
            
            pdf.setFontSize(10);
            pdf.text(`    ${checkbox} ${levelText}: ${behavior.description}`, 30, yPosition);
            yPosition += 6;
          });
          yPosition += 2;
        });
        yPosition += 5;
      });
      
      // Try to capture spider graph
      try {
        const spiderElement = document.querySelector('[data-testid="spider-graph"]') || 
                            document.querySelector('.recharts-wrapper') ||
                            document.querySelector('svg');
        
        if (spiderElement) {
          const canvas = await html2canvas(spiderElement as HTMLElement);
          const imgData = canvas.toDataURL('image/png');
          
          pdf.addPage();
          pdf.setFontSize(14);
          pdf.text('Performance vs Target (Level 3)', 20, 30);
          pdf.addImage(imgData, 'PNG', 20, 40, 170, 120);
        }
      } catch (error) {
        console.log('Could not capture spider graph:', error);
      }
      
      // Save PDF
      pdf.save(`${assessmentTitle.replace(/[^a-z0-9]/gi, '_')}_assessment.pdf`);
      
      toast({
        title: "PDF Downloaded",
        description: "Assessment results have been downloaded as PDF.",
      });
    } catch (error) {
      console.error('PDF generation error:', error);
      toast({
        title: "Download Error",
        description: "Failed to generate PDF. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleEmailShare = () => {
    const resultsText = generateResultsText();
    const subject = encodeURIComponent(`${assessmentTitle} - Assessment Results`);
    const body = encodeURIComponent(resultsText);
    const mailtoUrl = `mailto:?subject=${subject}&body=${body}`;

    window.open(mailtoUrl, '_blank');
  };

  const handleHome = () => {
    window.location.href = '/';
  };

  const handleProfile = () => {
    window.location.href = '/profile';
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
      <div className="grid grid-cols-4 gap-3">
        <button
          onClick={handleWebShare}
          disabled={isSharing}
          className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
        >
          <Share2 size={24} className="text-green-600" />
          <span className="text-xs text-gray-600">{isSharing ? "Sharing..." : "Share"}</span>
        </button>

        <button
          onClick={handleDownload}
          className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
        >
          <Download size={24} className="text-blue-600" />
          <span className="text-xs text-gray-600">Download</span>
        </button>

        <button
          onClick={handleHome}
          className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
        >
          <Home size={24} className="text-purple-600" />
          <span className="text-xs text-gray-600">Home</span>
        </button>

        <button
          onClick={handleProfile}
          className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
        >
          <UserIcon size={24} className="text-orange-600" />
          <span className="text-xs text-gray-600">Profile</span>
        </button>
      </div>
    </div>
  );
}