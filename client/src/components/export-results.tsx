import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Share2, Download, Home, User as UserIcon } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import type { Step, Substep, Behavior, User } from "@shared/schema";

type StepWithSubsteps = Step & {
  substeps: (Substep & {
    behaviors: Behavior[];
  })[];
};

interface ExportResultsProps {
  steps: StepWithSubsteps[];
  checkedBehaviors: Set<number>;
  totalScore: number;
  user: User;
  assessmentTitle: string;
}

export default function ExportResults({ 
  steps, 
  checkedBehaviors, 
  totalScore, 
  user, 
  assessmentTitle 
}: ExportResultsProps) {
  const { toast } = useToast();
  const [isSharing, setIsSharing] = useState(false);
  const [pdfBlob, setPdfBlob] = useState<Blob | null>(null);

  const generateResultsText = () => {
    const stepResults = steps.map(step => {
      const stepScore = step.substeps.reduce((total, substep) => {
        return total + substep.behaviors.reduce((substepTotal, behavior) => {
          if (checkedBehaviors.has(behavior.id)) {
            return substepTotal + behavior.proficiencyLevel;
          }
          return substepTotal;
        }, 0);
      }, 0);

      return `${step.title}: ${stepScore} points`;
    }).join('\n');

    return `SSA Behavior Assessment Results

User: ${user.fullName} (${user.email})
${user.team ? `Team: ${user.team}` : ''}
Assessment: ${assessmentTitle}
Date: ${new Date().toLocaleDateString()}

Total Score: ${totalScore} points

Step Breakdown:
${stepResults}

Generated by SSA Behavior Assessment Tool`;
  };

  const handleWebShare = async () => {
    setIsSharing(true);
    try {
      // Generate PDF and email content
      const pdf = await generatePDF();
      const emailBody = `Please find attached the report from the Selling Skills Assessment of ${user.fullName} on ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}.`;

      if (navigator.share && navigator.canShare) {
        try {
          const pdfBlob = pdf.output('blob');
          const file = new File([pdfBlob], `${assessmentTitle.replace(/[^a-z0-9]/gi, '_')}_assessment.pdf`, {
            type: 'application/pdf',
          });

          if (navigator.canShare({ files: [file] })) {
            await navigator.share({
              title: `${assessmentTitle} - Assessment Results`,
              text: emailBody,
              files: [file],
            });
            toast({
              title: "Shared successfully",
              description: "Assessment PDF has been shared.",
            });
            return;
          }
        } catch (shareError) {
          console.log('File sharing not supported, using email fallback');
        }
      }

      // Fallback to email with PDF download
      const subject = encodeURIComponent(`${assessmentTitle} - Assessment Results`);
      const body = encodeURIComponent(emailBody + '\n\nNote: The PDF report has been downloaded to your device. Please attach it to this email before sending.');
      const mailtoUrl = `mailto:?subject=${subject}&body=${body}`;

      // Download PDF for manual attachment
      pdf.save(`${assessmentTitle.replace(/[^a-z0-9]/gi, '_')}_assessment.pdf`);

      window.open(mailtoUrl, '_blank');

      toast({
        title: "Email prepared",
        description: "PDF downloaded for attachment. Email client opened with message template.",
      });

    } catch (error: any) {
      if (error.name !== 'AbortError') {
        toast({
          title: "Share failed",
          description: "Unable to share results. Please try again.",
          variant: "destructive",
        });
      }
    } finally {
      setIsSharing(false);
    }
  };

  const generatePDF = async () => {
    try {
      const pdf = new jsPDF();

      // Header with colorful design
      pdf.setFillColor(59, 130, 246); // Blue background
      pdf.rect(0, 0, 210, 25, 'F');

      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(16);
      const headerText = `Selling Skills Assessment Report`;
      pdf.text(headerText, 20, 17);

      // User information section
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(14);

      let yPosition = 40;

      // Set up 2-column layout
      const leftColumnX = 20;
      const rightColumnX = 110;

      // Add user information to the left column
      pdf.setFontSize(11);
      pdf.text(`Name: ${user.fullName}`, leftColumnX, yPosition);
      pdf.text(`Email: ${user.email}`, leftColumnX, yPosition + 8);
      if (user.team) pdf.text(`Team: ${user.team}`, leftColumnX, yPosition + 16);
      pdf.text(`Date: ${new Date().toLocaleDateString()}`, leftColumnX, yPosition + 24);
      pdf.text(`Time: ${new Date().toLocaleTimeString()}`, leftColumnX, yPosition + 32);

      // Calculate overall score (step levels added up divided by 7)
      const stepLevels = steps.map(step => {
        const stepScore = step.substeps.reduce((stepTotal, substep) => {
          const checkedCount = substep.behaviors.filter(b => checkedBehaviors.has(b.id)).length;
          const totalBehaviors = substep.behaviors.length;
          return stepTotal + (totalBehaviors > 0 ? (checkedCount / totalBehaviors) * 4 : 0);
        }, 0);
        return stepScore / step.substeps.length;
      });

      const currentScore = stepLevels.reduce((sum, level) => sum + level, 0) / steps.length;

      const overallProficiencyLevel = currentScore >= 3.5 ? 'Master' : 
                                     currentScore >= 2.5 ? 'Experienced' : 
                                     currentScore >= 1.5 ? 'Qualified' : 'Learner';
      
      pdf.setFontSize(12);
      pdf.text(`Proficiency Level: ${overallProficiencyLevel}`, leftColumnX, yPosition + 45);

      // Capture and add spider graph to the right column
      try {
        const spiderElement = document.querySelector('.recharts-wrapper') || document.querySelector('svg');
        if (spiderElement) {
          const canvas = await html2canvas(spiderElement as HTMLElement, {
            backgroundColor: '#ffffff',
            scale: 2,
          });
          const imgData = canvas.toDataURL('image/png');

          // Adjust position and size as needed
          pdf.addImage(imgData, 'PNG', rightColumnX, 40, 80, 60);
        }
      } catch (error) {
        console.log('Could not capture spider graph:', error);
      }

      yPosition = 110;

      // Steps with colorful headers and level indicators
        steps.forEach((step, stepIndex) => {
          if (yPosition > 250) {
            pdf.addPage();
            yPosition = 20;
          }

          // Step header with color
          const stepColors = [
            [220, 38, 127], [59, 130, 246], [16, 185, 129], [245, 158, 11],
            [139, 69, 19], [168, 85, 247], [239, 68, 68]
          ];
          const color = stepColors[stepIndex % stepColors.length];

          pdf.setFillColor(color[0], color[1], color[2]);
          pdf.rect(15, yPosition - 5, 180, 12, 'F');

          pdf.setTextColor(255, 255, 255);
          pdf.setFontSize(12);
          const stepLevel = stepLevels[stepIndex];
          const stepLevelName = stepLevel >= 3.5 ? 'Master' : 
                               stepLevel >= 2.5 ? 'Experienced' : 
                               stepLevel >= 1.5 ? 'Qualified' : 'Learner';

          pdf.text(`${stepIndex + 1}. ${step.title}`, 20, yPosition + 3);
          pdf.text(stepLevelName, 160, yPosition + 3);

          pdf.setTextColor(0, 0, 0);
          yPosition += 18;

          step.substeps.forEach((substep) => {
            if (yPosition > 270) {
              pdf.addPage();
              yPosition = 20;
            }

            // Substep title without level
            pdf.setFontSize(11);
            pdf.text(`${substep.title}`, 25, yPosition);
            yPosition += 8;

            substep.behaviors.forEach((behavior) => {
              if (yPosition > 275) {
                pdf.addPage();
                yPosition = 20;
              }

              const isChecked = checkedBehaviors.has(behavior.id);

              // Draw checkbox with checkmark or X
              pdf.setDrawColor(0, 0, 0);
              pdf.setLineWidth(0.5);
              pdf.rect(30, yPosition - 3, 4, 4);

              if (isChecked) {
                pdf.setTextColor(0, 150, 0); // Green text
                pdf.setFontSize(8);
                pdf.text('âœ“', 31, yPosition + 0.5);
              }

              pdf.setTextColor(0, 0, 0);
              pdf.setFontSize(9);
              pdf.text(`L${behavior.proficiencyLevel}: ${behavior.description}`, 38, yPosition);
              yPosition += 6;
            });
            yPosition += 3;
          });
          yPosition += 5;
        });

      return pdf;
    } catch (error) {
      console.error('PDF generation error:', error);
      throw error;
    }
  };

  const handleDownload = async () => {
    try {
      const pdf = await generatePDF();
      pdf.save(`${assessmentTitle.replace(/[^a-z0-9]/gi, '_')}_assessment.pdf`);

      toast({
        title: "PDF Downloaded",
        description: "Assessment results have been downloaded as PDF.",
      });
    } catch (error) {
      toast({
        title: "Download Error",
        description: "Failed to generate PDF. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleEmailShare = () => {
    const resultsText = generateResultsText();
    const subject = encodeURIComponent(`${assessmentTitle} - Assessment Results`);
    const body = encodeURIComponent(resultsText);
    const mailtoUrl = `mailto:?subject=${subject}&body=${body}`;

    window.open(mailtoUrl, '_blank');
  };

  const handleHome = () => {
    window.location.href = '/';
  };

  const handleProfile = () => {
    window.location.href = '/profile';
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
      <div className="grid grid-cols-4 gap-3">
        <button
          onClick={handleWebShare}
          disabled={isSharing}
          className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
        >
          <Share2 size={24} className="text-green-600" />
          <span className="text-xs text-gray-600">{isSharing ? "Sharing..." : "Share"}</span>
        </button>

        <button
          onClick={handleDownload}
          className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
        >
          <Download size={24} className="text-blue-600" />
          <span className="text-xs text-gray-600">Download</span>
        </button>

        <button
          onClick={handleHome}
          className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
        >
          <Home size={24} className="text-purple-600" />
          <span className="text-xs text-gray-600">Home</span>
        </button>

        <button
          onClick={handleProfile}
          className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
        >
          <UserIcon size={24} className="text-orange-600" />
          <span className="text-xs text-gray-600">Profile</span>
        </button>
      </div>
    </div>
  );
}