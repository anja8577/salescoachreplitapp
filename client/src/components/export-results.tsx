import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Share2, Download, Home, User as UserIcon } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import type { Step, Substep, Behavior, User } from "@shared/schema";

type StepWithSubsteps = Step & {
  substeps: (Substep & {
    behaviors: Behavior[];
  })[];
};

interface ExportResultsProps {
  steps: StepWithSubsteps[];
  checkedBehaviors: Set<number>;
  totalScore: number;
  user: User;
  assessmentTitle: string;
  stepScores?: { [stepId: number]: number };
  onSaveAssessment?: () => void;
}

export default function ExportResults({ 
  steps, 
  checkedBehaviors, 
  totalScore, 
  user, 
  assessmentTitle,
  stepScores = {},
  onSaveAssessment
}: ExportResultsProps) {
  const { toast } = useToast();
  const [isSharing, setIsSharing] = useState(false);
  const [pdfBlob, setPdfBlob] = useState<Blob | null>(null);
  const [keyObservations, setKeyObservations] = useState('');
  const [developmentFocus, setDevelopmentFocus] = useState('');
  const [nextSteps, setNextSteps] = useState('');

  const generateResultsText = () => {
    const stepResults = steps.map(step => {
      const stepScore = step.substeps.reduce((total, substep) => {
        return total + substep.behaviors.reduce((substepTotal, behavior) => {
          if (checkedBehaviors.has(behavior.id)) {
            return substepTotal + behavior.proficiencyLevel;
          }
          return substepTotal;
        }, 0);
      }, 0);

      return `${step.title}: ${stepScore} points`;
    }).join('\n');

    return `SSA Behavior Assessment Results

User: ${user.fullName} (${user.email})
${user.team ? `Team: ${user.team}` : ''}
Assessment: ${assessmentTitle}
Date: ${new Date().toLocaleDateString()}

Total Score: ${totalScore} points

Step Breakdown:
${stepResults}

Generated by SSA Behavior Assessment Tool`;
  };

  const generateHTMLReport = () => {
    const stepLevels = steps.map(step => {
      const manualScore = stepScores[step.id];
      if (manualScore && manualScore > 0) {
        return manualScore;
      }
      
      const stepScore = step.substeps.reduce((total, substep) => {
        return total + substep.behaviors.reduce((substepTotal, behavior) => {
          if (checkedBehaviors.has(behavior.id)) {
            return substepTotal + behavior.proficiencyLevel;
          }
          return substepTotal;
        }, 0);
      }, 0);

      if (stepScore === 0) return 0;
      // Same calculation logic as PDF...
      return stepScore > 15 ? 4 : stepScore > 10 ? 3 : stepScore > 5 ? 2 : 1;
    });

    const currentScore = stepLevels.reduce((sum, level) => sum + level, 0) / steps.length;
    const overallProficiencyLevel = currentScore >= 3.5 ? 'Master' : 
                                   currentScore >= 2.5 ? 'Experienced' : 
                                   currentScore >= 1.5 ? 'Qualified' : 'Learner';

    return `
      <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
        <div style="background: #3B82F6; color: white; padding: 20px; text-align: center;">
          <h1>Selling Skills Assessment Report</h1>
        </div>
        
        <div style="padding: 20px;">
          <h2>Assessment Details</h2>
          <p><strong>Name:</strong> ${user.fullName}</p>
          <p><strong>Email:</strong> ${user.email}</p>
          ${user.team ? `<p><strong>Team:</strong> ${user.team}</p>` : ''}
          <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
          <p><strong>Time:</strong> ${new Date().toLocaleTimeString()}</p>
          <p><strong>Proficiency Level:</strong> ${overallProficiencyLevel}</p>
          
          ${keyObservations ? `<h3>Key Observations</h3><p>${keyObservations}</p>` : ''}
          ${developmentFocus ? `<h3>Development Focus Areas</h3><p>${developmentFocus}</p>` : ''}
          ${nextSteps ? `<h3>Next Steps</h3><p>${nextSteps}</p>` : ''}
        </div>
      </div>
    `;
  };

  const handleWebShare = async () => {
    setIsSharing(true);
    try {
      // Generate PDF and email content
      const pdf = await generatePDF();
      const htmlReport = generateHTMLReport();
      const emailBody = `Please find below the Selling Skills Assessment report for ${user.fullName}:

${htmlReport}

The complete PDF report has been downloaded to your device for attachment.`;

      if (navigator.share && navigator.canShare) {
        try {
          const pdfBlob = pdf.output('blob');
          const file = new File([pdfBlob], `${assessmentTitle.replace(/[^a-z0-9]/gi, '_')}_assessment.pdf`, {
            type: 'application/pdf',
          });

          if (navigator.canShare({ files: [file] })) {
            await navigator.share({
              title: `${assessmentTitle} - Assessment Results`,
              text: emailBody,
              files: [file],
            });
            toast({
              title: "Shared successfully",
              description: "Assessment PDF has been shared.",
            });
            return;
          }
        } catch (shareError) {
          console.log('File sharing not supported, using email fallback');
        }
      }

      // Fallback to email with HTML content
      const subject = encodeURIComponent(`${assessmentTitle} - Assessment Results`);
      const body = encodeURIComponent(emailBody);
      const mailtoUrl = `mailto:?subject=${subject}&body=${body}`;

      // Download PDF for manual attachment
      pdf.save(`${assessmentTitle.replace(/[^a-z0-9]/gi, '_')}_assessment.pdf`);

      window.open(mailtoUrl, '_blank');

      toast({
        title: "Email prepared",
        description: "PDF downloaded for attachment. Email client opened with HTML message template.",
      });

    } catch (error: any) {
      if (error.name !== 'AbortError') {
        toast({
          title: "Share failed",
          description: "Unable to share results. Please try again.",
          variant: "destructive",
        });
      }
    } finally {
      setIsSharing(false);
    }
  };

  const generatePDF = async () => {
    try {
      const pdf = new jsPDF();

      // Header with colorful design
      pdf.setFillColor(59, 130, 246); // Blue background
      pdf.rect(0, 0, 210, 25, 'F');

      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(16);
      const headerText = `Selling Skills Assessment Report`;
      pdf.text(headerText, 20, 17);

      // User information section
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(14);

      let yPosition = 40;

      // Set up 2-column layout
      const leftColumnX = 20;
      const rightColumnX = 110;

      // Add user information to the left column
      pdf.setFontSize(11);
      pdf.text(`Name: ${user.fullName}`, leftColumnX, yPosition);
      pdf.text(`Email: ${user.email}`, leftColumnX, yPosition + 8);
      if (user.team) pdf.text(`Team: ${user.team}`, leftColumnX, yPosition + 16);
      pdf.text(`Date: ${new Date().toLocaleDateString()}`, leftColumnX, yPosition + 24);
      pdf.text(`Time: ${new Date().toLocaleTimeString()}`, leftColumnX, yPosition + 32);

      // Calculate overall score using same logic as assessment header
      const stepLevels = steps.map(step => {
        // Use manual step score if set, otherwise calculate from behaviors
        const manualScore = stepScores[step.id];
        if (manualScore && manualScore > 0) {
          return manualScore; // Return the actual level (1-4)
        }
        
        // Calculate automatic level based on behaviors
        const stepScore = step.substeps.reduce((total, substep) => {
          return total + substep.behaviors.reduce((substepTotal, behavior) => {
            if (checkedBehaviors.has(behavior.id)) {
              return substepTotal + behavior.proficiencyLevel;
            }
            return substepTotal;
          }, 0);
        }, 0);

        if (stepScore === 0) return 0;

        // Use same threshold logic as assessment-step.tsx
        const stepTitle = step.title.toLowerCase();
        const customThresholds: { [key: string]: { qualified: number; experienced: number; master: number } } = {
          "analyzing results": { qualified: 2, experienced: 3, master: 4 },
          "maintaining rapport": { qualified: 3, experienced: 4, master: 5 },
          "asking for commitment": { qualified: 2, experienced: 3, master: 2 },
          "summarizing": { qualified: 2, experienced: 3, master: 2 },
          "objection handling": { qualified: 2, experienced: 3, master: 4 },
          "active listening": { qualified: 2, experienced: 2, master: 3 }
        };

        const customKey = Object.keys(customThresholds).find(key => stepTitle.includes(key));
        if (customKey) {
          const thresholds = customThresholds[customKey];
          if (stepScore >= thresholds.master) return 4;
          if (stepScore >= thresholds.experienced) return 3;
          if (stepScore >= thresholds.qualified) return 2;
          return 1;
        }

        // Default calculation
        let stepLevel1Count = 0, stepLevel2Count = 0, stepLevel3Count = 0, stepLevel4Count = 0;
        step.substeps.forEach(substep => {
          substep.behaviors.forEach(behavior => {
            if (behavior.proficiencyLevel === 1) stepLevel1Count++;
            else if (behavior.proficiencyLevel === 2) stepLevel2Count++;
            else if (behavior.proficiencyLevel === 3) stepLevel3Count++;
            else if (behavior.proficiencyLevel === 4) stepLevel4Count++;
          });
        });

        const stepLevel1Max = stepLevel1Count * 1;
        const stepLevel2Max = stepLevel1Max + (stepLevel2Count * 2);
        const stepLevel3Max = stepLevel2Max + (stepLevel3Count * 3);

        if (stepScore > stepLevel3Max) return 4;
        if (stepScore > stepLevel2Max) return 3;
        if (stepScore > stepLevel1Max) return 2;
        return 1;
      });

      const currentScore = stepLevels.reduce((sum, level) => sum + level, 0) / steps.length;

      const overallProficiencyLevel = currentScore >= 3.5 ? 'Master' : 
                                     currentScore >= 2.5 ? 'Experienced' : 
                                     currentScore >= 1.5 ? 'Qualified' : 'Learner';
      
      pdf.setFontSize(12);
      pdf.text(`Proficiency Level: ${overallProficiencyLevel}`, leftColumnX, yPosition + 45);

      // Capture and add spider graph to the right column
      try {
        const spiderElement = document.querySelector('.recharts-wrapper') || document.querySelector('svg');
        if (spiderElement) {
          const canvas = await html2canvas(spiderElement as HTMLElement, {
            backgroundColor: '#ffffff',
            scale: 2,
          });
          const imgData = canvas.toDataURL('image/png');

          // Adjust position and size as needed
          pdf.addImage(imgData, 'PNG', rightColumnX, 40, 80, 60);
        }
      } catch (error) {
        console.log('Could not capture spider graph:', error);
      }

      yPosition = 110;

      // Steps with colorful headers and level indicators
        steps.forEach((step, stepIndex) => {
          if (yPosition > 250) {
            pdf.addPage();
            yPosition = 20;
          }

          // Step header with color
          const stepColors = [
            [220, 38, 127], [59, 130, 246], [16, 185, 129], [245, 158, 11],
            [139, 69, 19], [168, 85, 247], [239, 68, 68]
          ];
          const color = stepColors[stepIndex % stepColors.length];

          pdf.setFillColor(color[0], color[1], color[2]);
          pdf.rect(15, yPosition - 5, 180, 12, 'F');

          pdf.setTextColor(255, 255, 255);
          pdf.setFontSize(12);
          const stepLevel = stepLevels[stepIndex];
          const stepLevelName = stepLevel >= 3.5 ? 'Master' : 
                               stepLevel >= 2.5 ? 'Experienced' : 
                               stepLevel >= 1.5 ? 'Qualified' : 'Learner';

          pdf.text(`${stepIndex + 1}. ${step.title}`, 20, yPosition + 3);
          pdf.text(stepLevelName, 160, yPosition + 3);

          pdf.setTextColor(0, 0, 0);
          yPosition += 18;

          step.substeps.forEach((substep) => {
            if (yPosition > 270) {
              pdf.addPage();
              yPosition = 20;
            }

            // Substep title without level
            pdf.setFontSize(11);
            pdf.text(`${substep.title}`, 25, yPosition);
            yPosition += 8;

            substep.behaviors.forEach((behavior) => {
              if (yPosition > 275) {
                pdf.addPage();
                yPosition = 20;
              }

              const isChecked = checkedBehaviors.has(behavior.id);

              // Draw checkbox - filled if checked
              pdf.setDrawColor(0, 0, 0);
              pdf.setLineWidth(0.5);
              pdf.rect(30, yPosition - 3, 4, 4);

              if (isChecked) {
                pdf.setFillColor(100, 100, 100); // Grey fill
                pdf.rect(30, yPosition - 3, 4, 4, 'F');
              }

              pdf.setTextColor(0, 0, 0);
              pdf.setFontSize(9);
              
              // Wrap text for long behavior descriptions
              const behaviorText = `L${behavior.proficiencyLevel}: ${behavior.description}`;
              const maxWidth = 150; // Maximum width for text
              const lines = pdf.splitTextToSize(behaviorText, maxWidth);
              
              lines.forEach((line: string, lineIndex: number) => {
                pdf.text(line, 38, yPosition + (lineIndex * 5));
              });
              
              yPosition += lines.length * 5 + 1;
            });
            yPosition += 3;
          });
          yPosition += 5;
        });

        // Add text input sections
        if (keyObservations || developmentFocus || nextSteps) {
          if (yPosition > 250) {
            pdf.addPage();
            yPosition = 20;
          }

          yPosition += 10;

          if (keyObservations) {
            pdf.setFontSize(12);
            pdf.setTextColor(0, 0, 0);
            pdf.text('Key Observations:', 20, yPosition);
            yPosition += 8;
            
            pdf.setFontSize(10);
            const obsLines = pdf.splitTextToSize(keyObservations, 170);
            obsLines.forEach((line: string) => {
              pdf.text(line, 20, yPosition);
              yPosition += 5;
            });
            yPosition += 5;
          }

          if (developmentFocus) {
            pdf.setFontSize(12);
            pdf.text('Development Focus Areas:', 20, yPosition);
            yPosition += 8;
            
            pdf.setFontSize(10);
            const devLines = pdf.splitTextToSize(developmentFocus, 170);
            devLines.forEach((line: string) => {
              pdf.text(line, 20, yPosition);
              yPosition += 5;
            });
            yPosition += 5;
          }

          if (nextSteps) {
            pdf.setFontSize(12);
            pdf.text('Next Steps:', 20, yPosition);
            yPosition += 8;
            
            pdf.setFontSize(10);
            const stepLines = pdf.splitTextToSize(nextSteps, 170);
            stepLines.forEach((line: string) => {
              pdf.text(line, 20, yPosition);
              yPosition += 5;
            });
          }
        }

      return pdf;
    } catch (error) {
      console.error('PDF generation error:', error);
      throw error;
    }
  };

  const handleDownload = async () => {
    try {
      const pdf = await generatePDF();
      pdf.save(`${assessmentTitle.replace(/[^a-z0-9]/gi, '_')}_assessment.pdf`);

      toast({
        title: "PDF Downloaded",
        description: "Assessment results have been downloaded as PDF.",
      });
    } catch (error) {
      toast({
        title: "Download Error",
        description: "Failed to generate PDF. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleEmailShare = () => {
    const resultsText = generateResultsText();
    const subject = encodeURIComponent(`${assessmentTitle} - Assessment Results`);
    const body = encodeURIComponent(resultsText);
    const mailtoUrl = `mailto:?subject=${subject}&body=${body}`;

    window.open(mailtoUrl, '_blank');
  };

  const handleHome = () => {
    window.location.href = '/';
  };

  const handleProfile = () => {
    window.location.href = '/profile';
  };

  return (
    <div className="space-y-4">
      {/* Text Input Fields */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Key Observations</label>
          <textarea
            value={keyObservations}
            onChange={(e) => setKeyObservations(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            rows={3}
            placeholder="Enter key observations from the assessment..."
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Development Focus Areas</label>
          <textarea
            value={developmentFocus}
            onChange={(e) => setDevelopmentFocus(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            rows={3}
            placeholder="Identify areas for development and improvement..."
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Next Steps</label>
          <textarea
            value={nextSteps}
            onChange={(e) => setNextSteps(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            rows={3}
            placeholder="Outline the next steps and action items..."
          />
        </div>
      </div>

      {/* Save Assessment Button */}
      {onSaveAssessment && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 text-center">
          <button 
            className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg font-medium transition-colors"
            onClick={onSaveAssessment}
          >
            Save Assessment
          </button>
        </div>
      )}

      {/* Export Actions */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
        <div className="grid grid-cols-4 gap-3">
          <button
            onClick={handleWebShare}
            disabled={isSharing}
            className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
          >
            <Share2 size={24} className="text-green-600" />
            <span className="text-xs text-gray-600">{isSharing ? "Sharing..." : "Share"}</span>
          </button>

          <button
            onClick={handleDownload}
            className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
          >
            <Download size={24} className="text-blue-600" />
            <span className="text-xs text-gray-600">Download</span>
          </button>

          <button
            onClick={handleHome}
            className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
          >
            <Home size={24} className="text-purple-600" />
            <span className="text-xs text-gray-600">Home</span>
          </button>

          <button
            onClick={handleProfile}
            className="flex flex-col items-center justify-center space-y-2 p-3 hover:bg-gray-50 rounded-lg transition-colors"
          >
            <UserIcon size={24} className="text-orange-600" />
            <span className="text-xs text-gray-600">Profile</span>
          </button>
        </div>
      </div>
    </div>
  );
}